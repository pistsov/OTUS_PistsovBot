import peewee
from aiogram import Bot, Dispatcher, executor, types
import get_rates_async
from secret import TOKEN

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = peewee.SqliteDatabase('bot_database.db')

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class User(peewee.Model):
    user_id = peewee.IntegerField(unique=True)
    username = peewee.CharField(null=True)
    full_name = peewee.CharField(null=True)

    class Meta:
        database = db

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db.connect()
db.create_tables([User])

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('/eur')
    btn2 = types.KeyboardButton('/usd')
    btn3 = types.KeyboardButton('/‚ù§Ô∏è')
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                        "–ù–æ —É–º–µ—é –∏ –∫–æ–µ-—á—Ç–æ –µ—â—ë - —Å–º. –∫–Ω–æ–ø–∫–∏.\n"
                        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:\n"
                        "/add_me - –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "/list - –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                        "/del_me - —É–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n", reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ –∫–Ω–æ–ø–∫–∞–º
@dp.message_handler(commands=['eur', 'usd', '‚ù§Ô∏è'])
async def reply_message(message):
    print(message.from_user.username, message.text)
    match message.text:
        case '/eur':
            eur = await get_rates_async.fetch_eur()
            eur_text = '1 –µ–≤—Ä–æ = ' + str(eur) + ' —Ä—É–±–ª–µ–π –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
            await message.reply(eur_text)
        case '/usd':
            usd = await get_rates_async.fetch_usd()
            usd_text = '1 –¥–æ–ª–ª–∞—Ä = ' + str(usd) + ' —Ä—É–±–ª–µ–π –ø–æ –∫—É—Ä—Å—É –¶–ë –†–§ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è'
            await message.reply(usd_text)
        case '/‚ù§Ô∏è':
            await message.reply('@' + message.from_user.username + ', —Ç—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–ª–µ—Å—Ç—å!üòòüíã')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
@dp.message_handler(commands=['add_me'])
async def process_add_me_command(message: types.Message):
    print(message.from_user.username, message.text)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user = User.get_or_none(user_id=message.from_user.id)
    if user:
        await message.reply("–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        user = User.create(user_id=message.from_user.id, username=message.from_user.username, full_name=message.from_user.full_name)
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get
@dp.message_handler(commands=['list'])
async def process_get_command(message: types.Message):
    print(message.from_user.username, message.text)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    users = User.select()
    response = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        response += f"{user.full_name} (@{user.username})\n"
    await message.reply(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
@dp.message_handler(commands=['del_me'])
async def process_del_me_command(message: types.Message):
    print(message.from_user.username, message.text)
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    user = User.get_or_none(user_id=message.from_user.id)
    if user:
        user.delete_instance()
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)